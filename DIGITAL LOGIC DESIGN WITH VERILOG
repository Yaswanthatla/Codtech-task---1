// this files contain all the codes of gates and multiplexers


// AND Gate Module
module AND_gate(
    input wire a,
    input wire b,
    output wire y
);
    assign y = a & b;
endmodule


// OR Gate Module
module OR_gate(
    input wire a,
    input wire b,
    output wire y
);
    assign y = a | b;
endmodule


// NOT Gate Module
module NOT_gate(
    input wire a,
    output wire y
);
    assign y = ~a;
endmodule


// Full Adder Module
module full_adder(
    input wire a,
    input wire b,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign {cout, sum} = a + b + cin;
endmodule


// 2-to-1 Multiplexer Module
module mux2to1(
    input wire d0,
    input wire d1,
    input wire sel,
    output wire y
);
    assign y = sel ? d1 : d0;
endmodule


// Testbench Module for Full Adder
module testbench;
    reg a, b, cin;
    wire sum, cout;

    // Instantiate the full adder
    full_adder uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    initial begin
        // Initialize inputs
        a = 0; b = 0; cin = 0;
        #10; a = 0; b = 1; cin = 0;
        #10; a = 1; b = 0; cin = 0;
        #10; a = 1; b = 1; cin = 0;
        #10; a = 0; b = 0; cin = 1;
        #10; a = 0; b = 1; cin = 1;
        #10; a = 1; b = 0; cin = 1;
        #10; a = 1; b = 1; cin = 1;
        #10;
    end
endmodule
